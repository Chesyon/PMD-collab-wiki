"""An action mapped uniquely to an ID."""
type ActionId {
  id: Int!
  name: String!
}

"""Configuration for this instance of SpriteCollab."""
type Config {
  """The portrait width and height in pixels."""
  portraitSize: Int!

  """How many portraits per row a portrait sheet contains."""
  portraitTileX: Int!

  """How many rows a portrait sheet contains."""
  portraitTileY: Int!

  """A list of known emotions. The position is the ID of the emotion."""
  emotions: [String!]!

  """A list of known action. The position is the ID of the action."""
  actions: [String!]!

  """
  Returns a list, that for each phase contains a list of emotions (by index)
  that need to exist for this phase to be considered completed.
  """
  completionEmotions: [[Int!]!]!

  """
  Returns a list, that for each phase contains a list of actions (by index) that
  need to exist for this phase to be considered completed.
  """
  completionActions: [[Int!]!]!

  """A mapping of actions to EoS action indices."""
  actionMap: [ActionId!]!
}

type Credit {
  """Discord ID or absentee ID. Guaranteed to be an ASCII string."""
  id: String!

  """
  The human-readable name of the author. Guaranteed to be an ASCII string.
  """
  name: String

  """Contact information for this author."""
  contact: String
}

"""DateTime"""
scalar DateTimeUtc

type Monster {
  """All forms that exist for this monster."""
  forms: [MonsterForm!]!

  """Get a specific form for this monster."""
  get(formId: Int!, shiny: Boolean!, female: Boolean!): MonsterForm

  """
  Manually enter the path to a monster, seperated by /. This should match the
  path as it is stored in SpriteCollab, however the path passed in might be
  collapsed until a unique form is found.
  """
  manual(path: String!): MonsterForm

  """The id of this monster."""
  id: Int!

  """The name of this monster."""
  name: String
}

"""
A SkyTemple Discord Server Guild Point bounty that will be rewarded, if the
portrait or sprite has transitioned into a phase.
"""
type MonsterBounty {
  """
  If true, SpriteBot will not automatically hand out the Guild Point bounty.
  """
  modreward: Boolean!

  """Amount of points to reward if the phase changes to Incomplete."""
  incomplete: Int

  """Amount of points to reward if the phase changes to Exists."""
  exists: Int

  """Amount of points to reward if the phase changes to Full."""
  full: Int
  other: [OtherBounty!]!
}

type MonsterForm {
  """
  The full path to this form as it's specified in the SpriteCollab JSON file and repository file structure.
  """
  path: String!

  """Whether or not this form is considered for a shiny."""
  isShiny: Boolean!

  """Whether or not this form is considered for a female monsters."""
  isFemale: Boolean!

  """Whether or not this form is canon."""
  canon: Boolean!

  """Portraits for this form."""
  portraits: MonsterFormPortraits!

  """Sprites for this form."""
  sprites: MonsterFormSprites!
}

type MonsterFormPortraits {
  """Whether or not this form should have portraits."""
  required: Boolean!

  """Guild Point bounty for this portrait set."""
  bounty: MonsterBounty!

  """Current completion phase of the portraits."""
  phase: Phase!

  """Current completion phase of the portraits (raw ID)."""
  phaseRaw: Int!

  """Primary artist credits."""
  creditPrimary: Credit!

  """All other artists credited."""
  creditSecondary: [Credit!]!

  """URL to a SpriteBot format sheet of all portraits."""
  sheetUrl: String!

  """URL to a SpriteBot format recolor sheet."""
  recolorSheetUrl: String!

  """A list of all existing portraits for the emotions."""
  emotions: [Portrait!]!

  """A single portrait for a given emotion."""
  emotion(emotion: String!): Portrait

  """A list of all existing flipped portraits for the emotions."""
  emotionFlipped(emotion: String!): Portrait

  """A single flipped portrait for a given emotion."""
  emotionsFlipped: [Portrait!]!

  """The date and time this portrait set was last updated."""
  modifiedDate: DateTimeUtc!
}

type MonsterFormSprites {
  """Whether or not this form should have sprites."""
  required: Boolean!

  """Guild Point bounty for this sprite set."""
  bounty: MonsterBounty!

  """Current completion phase of the sprites."""
  phase: Phase!

  """Current completion phase of the sprites (raw ID)."""
  phaseRaw: Int!

  """Primary artist credits."""
  creditPrimary: Credit!

  """All other artists credited."""
  creditSecondary: [Credit!]!

  """URL to a SpriteBot format ZIP archive of all sprites."""
  zipUrl: String!

  """URL to a SpriteBot format recolor sheet."""
  recolorSheetUrl: String!

  """A list of all existing sprites for the actions."""
  actions: [Sprite!]!

  """A single sprite for a given action."""
  action(action: String!): Sprite

  """The date and time this sprite set was last updated."""
  modifiedDate: DateTimeUtc!
}

"""A bounty for a non-standard phase."""
type OtherBounty {
  phase: Int!
  bounty: Int!
}

"""The current phase of the sprite or portrait."""
enum Phase {
  INCOMPLETE
  EXISTS
  FULL

  """
  Returned if the phase value is non-standard. Use phase_raw to get the raw ID.
  """
  UNKNOWN
}

"""A single portrait for a single emotion."""
type Portrait {
  emotion: String!
  url: String!
}

type Query {
  """Version of this API."""
  apiVersion: String!

  """Search for a monster by (parts) of its name."""
  searchMonster(monsterName: String!): [Monster!]!

  """Retrieve a list of monsters."""
  monster(
    """Monster IDs to limit the request to."""
    filter: [Int!]
  ): [Monster!]!

  """
  Search for a credit entry by (parts) of the ID, the author name or the contact info.
  """
  searchCredit(query: String!): [Credit!]!

  """Retrieve a list of credits."""
  credit: [Credit!]!

  """Configuration for this instance of SpriteCollab."""
  config: [Config!]!
}

"""A single sprite for a single action."""
type Sprite {
  action: String!
  url: String!
}

